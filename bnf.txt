Fredrik Jonsén - frejo105
Daniel Eriksson - daner045

BNF-GRAMMAR

<begin> ::= <stmt_list>

<stmt_list> ::= <stmt> [<stmt_list>]

<stmt> ::= <expr> ';'
         | <if_stmt>
         | <for_stmt>
         | <while_stmt>
         | <class_def>
         | <function_def>
         | <return> ';'
         | '!->' ';'         # continue
         | '->!' ';'         # break

<expr> ::= '(' <expr> ')'
         | <assignment>
         | <conversion>
         | <unary_op> <expr>
         | <expr> <unary_op>
         | <bool_expr>
         | <comparison>
         | <arith_expr>
         | <expr_call>
         | <identifier>
         | <type>
         | '!' <expr>

<conversion> ::= <identifier> '->' <type_dec>

<bool_expr> ::= <bool_expr> '&&' <expr>
              | <bool_expr> '||' <expr>
              | <bool>

<expr_call> ::= <identifier> '(' [<arg_list>] ')'

<if_stmt> ::= '~i' <expr> <cond_body> [<elseif_list>] [~e <cond_body>]

<elseif_list> ::= [elseif_list] <elseif>

<elseif> ::= '~ei' <expr> <cond_body>

<for_stmt> ::= '~f' [<assignment ';'] <expr> ';' <expr> <cond_body>

<while_stmt> ::= '~w' <expr> <cond_body>

<cond_body> ::= '{' <stmt_list '}'
              | <stmt>

<arg_list> ::= <expr> [',' <arg_list>]

<param_list> ::= <identifier> ',' [<param_def_list> | <param_list>]
               | <param_def_list>
               | <identifier>

<param_def_list> ::= <identifier> '=' <expr> [',' <param_def_list>]

<class_def> ::= '§' <identifier> { <stmt_list> }

<function_def> ::= '@' <identifier> '(' [param_list] ')' '{' <stmt_list> '}'

<identifier> ::= <identifier> '.' <identifier>
               | <identifier> '[' <identifier> | <type> ']'
               | <name>

<name> ::= /[\wÅÄÖåäö][\w\d_åäöÅÄÖ]*/

<unary_op> ::= '++' | '--'

<comp_op> ::= '==' | '<=' | '>=' | '!=' | '<' | '>'

<comparison> ::= <arith_expr> <comp_op> <arith_expr>

<type_dec> ::= /:[ifsah]/

<arith_op> ::= '+' | '-'

<arith_expr> ::= '(' <arith_expr ')'
               | <arith_expr> <arith_op> <term>
               | <term> <arith_op> <term>
               | <term>

<term_op> ::= '//' | '*' | '/'

<term> ::= <term> <term_op> <pow>
         | <pow>

<pow> ::= <pow> '**' <factor>
        | <factor>

<factor> ::= '-' <factor>
           | '(' <arith_expr> ')'
           | <type>
           | <expr_call>
           | <identifier>

<assignment> ::= <expr_assignment> | <type_assignment>

<expr_assignment> ::= <identifier> '=' <expr>

<type_assignment> ::= <identifier> <type_dec>

<return> ::= '<-' [<expr>]

<type> ::= <bool> | <int> | <float> | <string> | <array> | <hash> | <nil>

<hash_arg_list> ::= <hash_arg> [',' <hash_arg_list>]

<hash_arg> ::= [<identifier> | <type>] ':' <expr>

<hash> ::= '{' [<hash_arg_list>] '}'

<array> ::= '[' [<arg_list>] ']'

<string> ::= /"[^"]*"/

<float> ::= Float

<int> ::= Integer

<bool> ::= 'true' | 'false'

<nil> ::= 'nil'
