Fredrik Jonsén - frejo105
Daniel Eriksson - daner045

BNF-GRAMMAR

<begin> ::= <stmt_list>

<stmt_list> ::= <stmt_list> <stmt>
    | <stmt>
              
<stmt> ::= <expr> ';'
    | <if_stmt>
    | <for_stmt>
    | <while_stmt>
    | <class_def>
    | <function_def>
    | <return> ';'
    | '!->' ';'         # continue
    | '->!' ';'         # break

<expr> ::= <unary_op> <expr>
    | <expr> <unary_op>
    | <arith_expr>
    | <comparison>
    | <function_call>
    | <identifier>
    | <type>
    | <assignment>
    | '!' <expr>

<expr_call> ::= <identifier> '(' [<arg_list>] ')'

<if_stmt> ::= '~i' <expr> <cond_body> [<elseif_list>] ['~e' <cond_body>]

<elseif_list> ::= [<elseif_list>] <elseif>

<elseif> ::= '~ei' <expr> <cond_body>

<for_stmt> ::= '~f' [<assignment> ';'] <expr> ';' <expr> <cond_body>

<while_stmt> ::= '~w' <expr> <cond_body>

<cond_body> ::= '{' <stmt_list> '}'
    | <stmt>

<arg_list> ::= <expr> [',' <arg_list>]

<param_list> ::= <identifier> [',' <param_list>]
    | <identifier> ',' <param_def_list>
    | <param_def_list>

<param_def_list> ::= <identifier> '=' <expr> [',' <param_def_list>]

<class_def> ::= '§' <identifier> '{' <stmt_list> '}'      #stmt_list allows for too much?

<function_def> ::= '@' <identifier> '(' [<param_list>] ')' '{' <stmt_list> '}'   #stmt_list allows for too much?

<identifier> ::= <identifier>'.'<identifier>
    | <identifier>'['<identifier>']'
    | <identifier>'['<type>']'
    | <name>

<name> ::= /_?[[:alpha:]][\w_]*/

<unary_op> ::= '++'
    | '--'

<comp_op> ::= '<'
    | '>'
    | '<='
    | '>='
    | '=='
    | '!='

<comparison> ::= <expr> <comp_op> <expr>

<type_dec> ::= ':i'
    | ':f'
    | ':s'
    | ':a'
    | ':h'

<arith_expr> ::= <arith_expr> '+' <term>
    | <arith_expr> '-' <term>
    | <term>

<term> ::= <term> <term_op> <factor>
    | <factor>

<term_op> ::= '%'
    | '**'
    | '//'
    | '*'
    | '/'

<factor> ::=  '-' <factor>
    | <expr>
    | <type>

<assignment> ::= <expr_assignment>
    | <type_assignment>

<expr_assignment> ::= <identifier> '=' <expr>

<type_assignment> ::= <identifier> <type_dec>

<return> ::= '<-' <expr>

<type> ::= <bool>
    | <int>
    | <float>
    | <string>
    | <array>
    | <hash>

<hash_arg_list> ::= <hash_arg>[',' <hash_arg_list>]

<hash_arg> ::= <identifier>':'<identifier>

<hash> ::= '{' [<hash_arg_list>] '}'

<array> ::= '[' [<arg_list>] ']'

<string> ::= /"[^"]*"/

<float> ::= Float
    
<int> ::= Integer
    
<bool> ::= 'true'
    | 'false'
