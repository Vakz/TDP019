BNF-GRAMMAR

<begin> ::= <stmt_list>

<stmt_list> ::= <stmt_list> <stmt>
    | <stmt>
              
<stmt> ::= <expr> ';'
    | <if_stmt>
    | <class_def>
    | <function_def>
    | <return> ';'
    | continue ';' #TBA
    | break ';'    #TBA

<expr> ::= <arith_expr>
    | <comparison>

<if_stmt> ::= '~i' <expr> '{' <stmt_list> '}'
    | '~i' <expr> '{' <stmt_list> '}' '~e' '{' <stmt_list> '}'
    | '~i' <expr> '{' <stmt_list> '}' <elseif_list>
    | '~i' <expr> '{' <stmt_list> '}' <elseif_list> '~e' '{' <stmt_list> '}'

<elseif_list> ::= <elseif_list> <elseif>
    | <elseif>

<elseif> ::= '~ei' <expr> '{' <stmt_list> '}'

<arg_list> ::= <arg_list> ',' <expr>
    | <expr>

<param_list> ::= <param_list> ',' <identifier>            #?
    | <identifier>

<class_def> ::= 'ยง' <identifier> '{' <stmt_list> '}'      #stmt_list allows for too much?

<function_def> ::= '@' <identifier> '{' <stmt_list> '}'   #stmt_list allows for too much?

<comp_op> ::= '<'
    | '>'
    | '<='
    | '>='
    | '=='
    | '!='

<comparison> ::= <expr> <comp_op> <expr>

<type_dec> ::= ':i'
    | ':f'
    | ':s'
    | ':a'
    | ':h'

<arith_expr> ::= <arith_expr> '+' <term>
    | <arith_expr> '-' <term>
    | <term>

<term> ::= <term> '%' <factor>
    | <term> '*' <factor>
    | <term> '/' <factor>
    | <term> '**' <factor>
    | <term> '//' <factor>

<factor> ::= 

<assignment> ::= <identifier> '=' <expr>

<type_assignment> ::= <identifier> <type>

<return> ::= '<-' <expr>

<type> ::= <bool>
    | <int>
    | <float>
    | <string>
    | <array>
    | <hash>

<hash> ::=

<array> ::= '[' <arg_list> ']'

<string> ::= '"' /.*/ '"'

<float> ::= Float
    | '-' Float
    
<int> ::= Integer
    | '-' Integer
    
<bool> ::= 'true'
    | 'false'